airmar-decoding.txt

Created by Alex Tong February 2 2015
Updated by Alex Tong February 16 2015

This file contains notes on the process of decoding NMEA2000 standard data
from the airmar wx200 sensor, using an Airmar wx200, an arduino uno, a 
spark-fun can-bus arduino shield, and a raspberry pi stack.

Eventually this will be used in the 2meter boat as the sensor processing unit

--------------------------------------------------------------------------------
Written by Alex Tong February 16 2015
--------------------------------------------------------------------------------

I received a set of the draft Airmar PGN's from Dominic. This will enable us,
along with the canboat project to decode all of the data off of the airmar
device. However, first is to decode the headers from the canbus shield device.
The code driver for the spark-fun can-bus arduino shield is written in C++, 
with what seems like some sort of system library detailing input and output to
the shield. The shield seems to have at least two "buffers" where the messages
are kept until accessed by the program. My first approach is to modify the code
which reads specific messages to also read and output the associated header for
that data message, either modifying the existing read message function or add
a similar function which additionally implements a read message & header function.

At this point I don't full understand how the message format PGN's are identified.
if they are not identified through the header, or are identified in some other
manner this might be a simpler option. Further research is necessary on the
identification of message traffic on an NMEA 2000 based system.

Can-Bus Code:
The can-bus read's messages by updating the public object containing a bunch of
information about the message can-id etc. Wonder if I can add an item to the
can-bus object? or reconstruct the necessary parts for the PGN from the existing
C++ object (probably easier/hackier)

Airmar Connections:
Currently working off:
Red     -- +12V
Black   -- GND
White   -- CANH
Blue    -- CANL

--------------------------------------------------------------------------------
Written by Alex Tong February 11 2015
--------------------------------------------------------------------------------

Powered up the device, got bits through the shield to the raspi. Now think the
best way to procede is to use the shield and arduino to stream bits in raw
format to the pi which will process the bits using the canboat project PGN 
decoder "analyzer" this will allow us to easily build off of the canboat
project. The tricky part of this will be building the canboat programs and 
ensuring the correct translation unit between the can-bus and the canboat
program.

With some luck, all the necessary airmar PGN's are available on the can-boat
project, which should eventually allow the complete decoding of the airmar
sensor data. I do not yet know how to get the Can-bus headers off of the shield
which are necessary for the canboat program??? (or can we use fake headers)

The NMEA 2000 standard implements the can extended fram which is a 29bit header
for each data packet of upto 8 bytes, I believe that all airmar PGN's will use
the full 8 bytes padding the end with 1's if necessary.

--------------------------------------------------------------------------------
Written by Alex Tong February 5 2015
--------------------------------------------------------------------------------

Update on the Airmar decoding,
Have yet to power up the sensor, however initial testing suggests that the
sensor is preconfigured to be either NMEA2000 or NMEA 0183 compatable.

Therefore, the next course of action is to attempt to record the data so that
we might decipher the NMEA2000 proprietary standard. This will probably require
a private git-hub database to avoid copyright issues.

Blog link describing the upgrade from NMEA0183 to NMEA2000 standards.


--------------------------------------------------------------------------------
Written by Alex Tong February 2 2015
--------------------------------------------------------------------------------

This file depicts the process of decoding messages sent by the Airmar wx200
weather station.

The first thing to notice is the configuration of outputs of the Airmar sensor.
It has 5 wires, red, black, white, green, and blue. By the Airmar installation
specs (linked below, and contained in the dropbox) the red and black wires
supply power to the airmar, and before powering up the sensor we afixed a 0.5A
fast-blow fuse to one of the terminals.

red -- Vin
black -- gnd
white
green
blue

by the number of wires we have an NMEA 2000 protocol transmission wire. While
this protocol is technically compatable with the CAN-BUS arduino shield, the
transmission is not in human readable form as the NMEA 0183 standard is. This
makes it extremely hard to extract information from he protocol considering its
expensive proprietary features. One project, the "canboat" project has worked
to reverse engineer the NMEA 2k protocol, and as a first attempt we will use
this project to interpret messages from the sensor. It appears that the standard
transmission rate of NMEA 2k is 250kbps.

Given this fact, it may be the easiest option to scrap the NMEA2000 protocol,
and buy a NMEA 0183 standard cord instead, which is what queens robotic sailing
club had success with. 

Link to airmar wx200 installation guide as of Feb 2015:
http://www.airmartechnology.com/uploads/installguide/17-461-01.pdf

###############################################################################
END OF FILE
###############################################################################
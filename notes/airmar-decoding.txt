airmar-decoding.txt

Created by Alex Tong February 2 2015
Updated by Alex Tong February 16 2015

This file contains notes on the process of decoding NMEA2000 standard data
from the airmar wx200 sensor, using an Airmar wx200, an arduino uno, a 
spark-fun can-bus arduino shield, and a raspberry pi stack.

Eventually this will be used in the 2meter boat as the sensor processing unit

--------------------------------------------------------------------------------
Written by Alex Tong February 20 2015
--------------------------------------------------------------------------------

From arduino forum:
Written by more than 8 data bytes is sent is a little confusing.  They send it
7 bytes at a time with the first byte of every message incrementing by 1, which
is called the sequence identifier.  So to send more than 8 data bytes, you would
essentially be sending multiple messages, each having the sequence identifier
one greater than the previous.  Three such messages would give you 21 bytes and
four would give you 28.

jpjcb66: The first 3 bits of the id is the priority, the next 18 bits are the
PGN, and the last 8 bits are the source address.
See the comments in my code above in void loop().

-------------------------------------------------------------------------------
SUCCESS!!!!!

Output code from arduino serial:

PGM    RAW       ID       DATA (8 bytes)
1F113: 4F891323: 9F11323: 23    94  56  FE  FF  FF  FF  FF  
1F112: 4F891223: 9F11223: FF    FF  FF  FF  7F  FB  F5  FF  
1F113: 4F891323: 9F11323: 24    F5  82  FD  FF  FF  FF  FF  
1F801: 4FC80123: 9F80123: FF    FF  FF  7F  FF  FF  FF  7F  
1F112: 4F891223: 9F11223: FF    FF  FF  FF  7F  FB  F5  FF  
1F802: 4FC80223: 9F80223: FF    FF  FF  FF  FF  FF  FF  FF  
1FD02: 4FE90223: 9FD0223: DD    FF  FF  FF  FF  F8  FF  FF  
1F113: 4F891323: 9F11323: 25    94  56  FE  FF  FF  FF  FF  
1F112: 4F891223: 9F11223: FF    FF  FF  FF  7F  FB  F5  FF  
1FD07: AFE90723: 15FD0723: 6F   C1  55  73  FF  7F  F1  3   
1F113: 4F891323: 9F11323: 26    61  2C  FF  FF  FF  FF  FF  
1F801: 4FC80123: 9F80123: FF    FF  FF  7F  FF  FF  FF  7F  
1F112: 4F891223: 9F11223: FF    FF  FF  FF  7F  FB  F5  FF  
1F802: 4FC80223: 9F80223: FF    FF  FF  FF  FF  FF  FF  FF  
1F113: 4F891323: 9F11323: 27    61  2C  FF  FF  FF  FF  FF  
1F112: 4F891223: 9F11223: FF    FF  FF  FF  7F  FB  F5  FF  
1FD02: 4FE90223: 9FD0223: DE    0   0   4B  1   FA  FF  FF  
1F113: 4F891323: 9F11323: 28    61  2C  FF  FF  FF  FF  FF  
1F801: 4FC80123: 9F80123: FF    FF  FF  7F  FF  FF  FF  7F  
1F112: 4F891223: 9F11223: FF    FF  FF  FF  7F  FB  F5  FF  
1F802: 4FC80223: 9F80223: FF    FF  FF  FF  FF  FF  FF  FF  
1F113: 4F891323: 9F11323: 29    61  2C  FF  FF  FF  FF  FF  
1F112: 4F891223: 9F11223: FF    FF  FF  FF  7F  FB  F5  FF  
1FD02: 4FE90223: 9FD0223: DF    FF  FF  FF  FF  F8  FF  FF  
1F010: 6F881023: DF01023: FF    F0  FF  FF  FF  FF  FF  FF  
1F119: 6F891923: DF11923: B7    FF  7F  FF  7F  FF  7F  FF  

The problem was in arduino integer representations as 16 bit integers.
However, for some reason when you take the complement with ~, they turn into
32 bit integers, so for a long while I was tricked into thinking they were the
fairly standard length of 32bits. This mean't that the PGN was always cut off of
the can message ID.

The first line is a correctly formatted pgn for rate of turn (which turns out
as a bad value because the sensor is booting... but that's besides the point)

--------------------------------------------------------------------------------
Written by Alex Tong February 19 2015
--------------------------------------------------------------------------------
Found out what a shield wire does, I think it is the green one, it needs to be
connected to a ground as an electromagnetic shield to reduce interference from
outside sources. This may??? be the reason why I'm getting wierd data?
probably not.

Always ends with 0xDC
The standard Can ID is always 0 for some unknown reason... maybe I'm not reading
the correct part of the data? why would that be.

Will try with two can-buses and attempt to transmit good messages to decode next


--------------------------------------------------------------------------------
Written by Alex Tong February 18 2015
--------------------------------------------------------------------------------

Tried switching the transmission wires (white and blue) did not get any signal
(the two orange LED's no longer blink rapidly) it appears I might know what I'm 
doing/got really lucky in choosing which wires to attach where.

Relevent code for getting a CAN ID is pasted below. Not exactly sure why, but
all ID's that I see end with a 0x23 in hex. This seems very strange. PGN's that
I have seen should have an E or F in the third or fourth slot. ex. 0x0EE00
but nothing seems to look like that

------------
BEGIN CODE
------------

/*********************************************************************************************************
** Function name:           mcp2515_read_id
** Descriptions:            read can id
*********************************************************************************************************/
void MCP_CAN::mcp2515_read_id( const INT8U mcp_addr, INT8U* ext, INT32U* id )
{
    INT8U tbufdata[4];
    *ext = 0;
    *id = 0;
    mcp2515_readRegisterS( mcp_addr, tbufdata, 4 );

    *id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);

    if ( (tbufdata[MCP_SIDL] & MCP_TXB_EXIDE_M) ==  MCP_TXB_EXIDE_M ) 
    {
        /* extended id                  */
        *id = (*id<<2) + (tbufdata[MCP_SIDL] & 0x03);
        *id = (*id<<8) + tbufdata[MCP_EID8];
        *id = (*id<<8) + tbufdata[MCP_EID0];
        *ext = 1;
    }
}

------------
END   CODE
------------

--------------------------------------------------------------------------------
Written by Alex Tong February 16 2015
--------------------------------------------------------------------------------

I received a set of the draft Airmar PGN's from Dominic. This will enable us,
along with the canboat project to decode all of the data off of the airmar
device. However, first is to decode the headers from the canbus shield device.
The code driver for the spark-fun can-bus arduino shield is written in C++, 
with what seems like some sort of system library detailing input and output to
the shield. The shield seems to have at least two "buffers" where the messages
are kept until accessed by the program. My first approach is to modify the code
which reads specific messages to also read and output the associated header for
that data message, either modifying the existing read message function or add
a similar function which additionally implements a read message & header function.

At this point I don't full understand how the message format PGN's are identified.
if they are not identified through the header, or are identified in some other
manner this might be a simpler option. Further research is necessary on the
identification of message traffic on an NMEA 2000 based system.

Can-Bus Code:
The can-bus read's messages by updating the public object containing a bunch of
information about the message can-id etc. Wonder if I can add an item to the
can-bus object? or reconstruct the necessary parts for the PGN from the existing
C++ object (probably easier/hackier)

Airmar Connections:
Currently working off:
Red     -- +12V
Black   -- GND
White   -- CANH
Blue    -- CANL
Green   -- Nothing -- Have no idea what it does (Shield?) needs more research

The can frame:
Airmar PGNs all PGN's are numbered in Hex with a 5 Digit hex number, for all
the airmar PGN's this number can be represented in 17 bits. The format for the
extended can frame is dictated on the wikipedia:
    http://en.wikipedia.org/wiki/CAN_bus
I would suspect that the PGN is represented by the 18 bit identifier B.

CAUTION: Bit Stuffing (may make frames longer than originally supposed check
         wiki)

Update:
Got some sort of ID by using getCanId() function, which returns a 32 bit integer
however can't get it to mean anything even after a bit of bit twiddling.
Looked at the code of how it is obtained and seems reasonable. Tried 2's
compliment, but need to try some more tomorrow. The same numbers keep coming
up over and over suggesting that this is good data, I'm just not interpreting 
it correctly. Sample out is pasted below.

------------
BEGIN OUTPUT
------------
CAN BUS Shield init ok!
1323: 136   77  81  8   0   255 255 255 
1223: 255   255 255 255 127 251 245 255 
123: 255    255 255 127 255 255 255 127 
1323: 137   127 123 7   0   255 255 255 
1223: 255   255 255 255 127 251 245 255 
223: 159    255 255 255 255 248 255 255 
1023: 255   240 255 255 255 255 255 255 
1323: 32    30  240 255 255 255 255 255 
223: 255    255 255 255 255 255 255 255 
1223: 255   255 255 255 127 251 245 255 
1323: 33    255 255 255 255 127 255 255 
1323: 34    255 127 10  0   176 184 250 
1323: 35    255 255 241 3   31  114 2   
523: 32 43  255 255 255 255 255 255 
523: 33 255 255 255 255 255 255 255 
523: 34 255 127 255 255 255 255 255 
523: 35 255 255 127 255 255 255 255 
923: 255    255 255 255 255 255 255 127 
523: 36 255 255 255 127 3   252 0   
523: 37 255 127 255 127 255 255 255 
523: 38 127 0   255 255 255 255 255 
423: 32 3   255 255 0   255 255 255 
1323: 139   77  81  8   0   255 255 255 
1223: 255   255 255 255 127 251 245 255 
1323: 140   77  81  8   0   255 255 255 
123: 255    255 255 127 255 255 255 127 
1223: 255   255 255 255 127 251 245 255 
223: 255    255 255 255 255 255 255 255 
223: 160    10  0   176 184 250 255 255 
1323: 141   77  81  8   0   255 255 255 
1223: 255   255 255 255 127 251 245 255 
1323: 142   77  81  8   0   255 255 255 
123: 255    255 255 127 255 255 255 127 
1223: 255   255 255 255 127 251 245 255 
223: 255    255 255 255 255 255 255 255 
223: 161    255 255 255 255 248 255 255 
1323: 143   77  81  8   0   255 255 255 
1223: 255   255 255 255 127 251 245 255 
723: 81 193 31  114 255 127 241 3   
1323: 144   77  81  8   0   255 255 255 
------------
END   OUTPUT
------------

Note: ID's are recorded in Hex

--------------------------------------------------------------------------------
Written by Alex Tong February 11 2015
--------------------------------------------------------------------------------

Powered up the device, got bits through the shield to the raspi. Now think the
best way to procede is to use the shield and arduino to stream bits in raw
format to the pi which will process the bits using the canboat project PGN 
decoder "analyzer" this will allow us to easily build off of the canboat
project. The tricky part of this will be building the canboat programs and 
ensuring the correct translation unit between the can-bus and the canboat
program.

With some luck, all the necessary airmar PGN's are available on the can-boat
project, which should eventually allow the complete decoding of the airmar
sensor data. I do not yet know how to get the Can-bus headers off of the shield
which are necessary for the canboat program??? (or can we use fake headers)

The NMEA 2000 standard implements the can extended fram which is a 29bit header
for each data packet of upto 8 bytes, I believe that all airmar PGN's will use
the full 8 bytes padding the end with 1's if necessary.

--------------------------------------------------------------------------------
Written by Alex Tong February 5 2015
--------------------------------------------------------------------------------

Update on the Airmar decoding,
Have yet to power up the sensor, however initial testing suggests that the
sensor is preconfigured to be either NMEA2000 or NMEA 0183 compatable.

Therefore, the next course of action is to attempt to record the data so that
we might decipher the NMEA2000 proprietary standard. This will probably require
a private git-hub database to avoid copyright issues.

Blog link describing the upgrade from NMEA0183 to NMEA2000 standards.


--------------------------------------------------------------------------------
Written by Alex Tong February 2 2015
--------------------------------------------------------------------------------

This file depicts the process of decoding messages sent by the Airmar wx200
weather station.

The first thing to notice is the configuration of outputs of the Airmar sensor.
It has 5 wires, red, black, white, green, and blue. By the Airmar installation
specs (linked below, and contained in the dropbox) the red and black wires
supply power to the airmar, and before powering up the sensor we afixed a 0.5A
fast-blow fuse to one of the terminals.

red -- Vin
black -- gnd
white
green
blue

by the number of wires we have an NMEA 2000 protocol transmission wire. While
this protocol is technically compatable with the CAN-BUS arduino shield, the
transmission is not in human readable form as the NMEA 0183 standard is. This
makes it extremely hard to extract information from he protocol considering its
expensive proprietary features. One project, the "canboat" project has worked
to reverse engineer the NMEA 2k protocol, and as a first attempt we will use
this project to interpret messages from the sensor. It appears that the standard
transmission rate of NMEA 2k is 250kbps.

Given this fact, it may be the easiest option to scrap the NMEA2000 protocol,
and buy a NMEA 0183 standard cord instead, which is what queens robotic sailing
club had success with. 

Link to airmar wx200 installation guide as of Feb 2015:
http://www.airmartechnology.com/uploads/installguide/17-461-01.pdf

###############################################################################
END OF FILE
###############################################################################
